---
title: "Short Assignment, Cappy"
format: html
editor: visual
---

Your first short assignment is to put together everything we have been learning so far into one workable function that will process a genotype table to output a series of population genetic results. Your function should:

1.  Take a genotype matrix and a sample table as input.

2.  Return individual site frequency across the genotype matrix for each population.

    ```{r}
    freq_GT = function(site,ploidy=2){
      clean_site = na.omit(site)
      total_sites = ploidy*length(site)
      p = sum(clean_site)/total_sites
      return(p)
    }

    process_GT = function(GT,samples){
        ids = gsub(":[A,T,C,G]*:[A,T,C,G]*","",rownames(GT))
        chr = gsub(":.*","",ids)
        pos = as.numeric(gsub(".*:","",ids))
        summary_list = list("chr"=chr,"pos"=pos)
        summary_list = append(summary_list,list("sample_het"=apply(GT,1,sample_het)))
      
        pops = sort(unique(samples$population))
        #Get indices for each population
        idx_pops = lapply(pops,function(x) {
            which(colnames(GT) %in% samples$sample_id[which(samples$population == x)])
        })
        #Name them to make retrieval easier.
        names(idx_pops) = pops
        #Check for NAs per site per pop
        obs_alleles = lapply(1:length(pops),function(x){
            apply(GT[,idx_pops[[x]]],1,function(x) length(!is.na(x)))
        })
        names(obs_alleles) = pops
        summary_list[["obs"]] = obs_alleles
        # Now, let's get allele frequencies        
        ps = lapply(1:length(pops),function(x) {
            apply(GT[,idx_pops[[x]]],1,freq_GT)
        })
        names(ps) = pops
        summary_list[["p"]] = ps
        # Heterozygosities
        hets = lapply(1:length(pops),function(x) {
            apply(GT[,idx_pops[[x]]],1,sample_het)
        })
        names(hets) = pops
        summary_list[["het"]] = hets
        #All possible pairs of populations:
        pop_pairs = combn(pops,2)
        #Calculate fst for each
        fst =lapply(1:dim(pop_pairs)[2],function(x) {
            pop1 = pop_pairs[1,x]
            pop2 = pop_pairs[2,x]
            n1 = obs_alleles[[pop1]]
            n2 = obs_alleles[[pop2]]
            p1 = ps[[pop1]]
            p2 = ps[[pop2]]
            return(fst_site(p1,p2,n1,n2))
        })
        # Add names to make comparisons clear
        names(fst) = sapply(1:dim(pop_pairs)[2],function(x) paste(pop_pairs[,x],collapse="-"))
        #And dxy
        dxy =lapply(1:dim(pop_pairs)[2],function(x){
            p1 = ps[[pop_pairs[1,x]]]
            p2 = ps[[pop_pairs[2,x]]]
            return(dxy_site(p1,p2))
        })
        #Adding names to dxy as well
        names(dxy) = sapply(1:dim(pop_pairs)[2],function(x) paste(pop_pairs[,x],collapse="-"))
        #Don't forget to add these to the dataframe
        summary_list[["fst"]] = fst
        summary_list[["dxy"]] = dxy
        return(summary_list)
    }
    ```

3.  Return site sample heterozygosity for each population.

    ```{r}
    sample_het = function(site){
      n = 2*length(site)
      p = freq_GT(site)
      h = n/(n-1)*2*p*(1-p)
      return(h)
    }
    ```

4.  Calculate all pairwise undefinedF_ST values for all pairs of samples.

    ```{r}
    fst_site = function(p1,p2,n1,n2){
        f1 = n1/(n1+n2)
        f2 = 1-f1
        num = f1*p1*(1-p1)+f2*p2*(1-p2)
        denom = (f1*p1+f2*p2)*(f1*(1-p1)+f2*(1-p2)) 
        fst = 1-num/denom
        return(fst)
    }
    ```

5.  Return average r\^2 correlation within each population.

    `calculating r\^2: cor_mat = cor(t(GT))`

6.  Work on your test data set

```{r}
# making test data set
install.packages("charlatan")
library("charlatan")
```

1.  The test data should have at least 3 populations, and at least 40 sites.

### The submission should therefore include four files minimum: 

1.  Your source script including your processing functions.
2.  Your test script that checks if the function works correctly.
3.  The test data file
4.  file defining each population (something like `muc_samples.txt` in the lab).